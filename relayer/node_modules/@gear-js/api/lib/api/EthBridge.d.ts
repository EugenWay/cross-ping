import { SubmittableExtrinsic } from '@polkadot/api/types';
import { ISubmittableResult } from '@polkadot/types/types';
import { GearApi } from '../GearApi';
import { HexString, Proof } from '../types';
export declare class GearEthBridge {
    private api;
    constructor(api: GearApi);
    authoritySetHash(): Promise<HexString>;
    clearTimer(): Promise<number>;
    isInitialized(): Promise<boolean>;
    getMessageNonce(): Promise<bigint>;
    isPaused(): Promise<boolean>;
    getQueue(): Promise<Array<HexString>>;
    isQueueChanged(): Promise<boolean>;
    getQueueMerkleRoot(): Promise<HexString>;
    getSessionsTimer(): Promise<number>;
    sendEthMessage(destination: HexString | Uint8Array, payload: HexString | Uint8Array): SubmittableExtrinsic<'promise', ISubmittableResult>;
    merkleProof(hash: HexString | Uint8Array, at?: HexString | Uint8Array): Promise<Proof>;
    get maxPayloadSize(): number;
    get queueCapacity(): number;
    get sessionsPerEra(): number;
}
