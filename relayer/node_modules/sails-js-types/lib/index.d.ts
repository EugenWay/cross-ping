interface ISailsDocs {
    /** Docs from the IDL file */
    readonly docs?: string;
}

interface IWithDefEntity {
    readonly def: ISailsTypeDef;
}
interface ISailsType extends IWithDefEntity, ISailsDocs {
    readonly name: string;
}
interface ISailsTypeDef {
    readonly isPrimitive: boolean;
    readonly asPrimitive: ISailsPrimitiveDef;
    readonly isStruct: boolean;
    readonly asStruct: ISailsStructDef;
    readonly isEnum: boolean;
    readonly asEnum: ISailsEnumDef;
    readonly isOptional: boolean;
    readonly asOptional: ISailsOptionalDef;
    readonly isResult: boolean;
    readonly asResult: ISailsResultDef;
    readonly isVec: boolean;
    readonly asVec: ISailsVecDef;
    readonly isMap: boolean;
    readonly asMap: ISailsMapDef;
    readonly isFixedSizeArray: boolean;
    readonly asFixedSizeArray: ISailsFixedSizeArrayDef;
    readonly isUserDefined: boolean;
    readonly asUserDefined: ISailsUserDefinedDef;
}
interface ISailsPrimitiveDef {
    readonly isNull: boolean;
    readonly isBool: boolean;
    readonly isChar: boolean;
    readonly isStr: boolean;
    readonly isU8: boolean;
    readonly isU16: boolean;
    readonly isU32: boolean;
    readonly isU64: boolean;
    readonly isU128: boolean;
    readonly isI8: boolean;
    readonly isI16: boolean;
    readonly isI32: boolean;
    readonly isI64: boolean;
    readonly isI128: boolean;
    readonly isActorId: boolean;
    readonly isCodeId: boolean;
    readonly isMessageId: boolean;
    readonly isH256: boolean;
    readonly isU256: boolean;
    readonly isH160: boolean;
    readonly isNonZeroU8: boolean;
    readonly isNonZeroU16: boolean;
    readonly isNonZeroU32: boolean;
    readonly isNonZeroU64: boolean;
    readonly isNonZeroU128: boolean;
    readonly isNonZeroU256: boolean;
}
interface ISailsStructDef {
    readonly fields: ISailsStructField[];
    readonly isTuple: boolean;
}
interface ISailsStructField extends IWithDefEntity, ISailsDocs {
    readonly name: string;
}
interface ISailsEnumDef {
    readonly variants: ISailsEnumVariant[];
    readonly isNesting: boolean;
}
interface ISailsEnumVariant extends IWithDefEntity, ISailsDocs {
    readonly name: string;
}
type ISailsOptionalDef = IWithDefEntity;
interface ISailsResultDef {
    readonly ok: IWithDefEntity;
    readonly err: IWithDefEntity;
}
type ISailsVecDef = IWithDefEntity;
interface ISailsMapDef {
    readonly key: IWithDefEntity;
    readonly value: IWithDefEntity;
}
interface ISailsFixedSizeArrayDef extends IWithDefEntity {
    readonly len: number;
}
interface ISailsUserDefinedDef {
    readonly name: string;
}

interface ISailsProgram {
    readonly services: ISailsService[];
    readonly ctor: ISailsCtor;
    readonly types: ISailsType[];
    getTypeByName(name: string): ISailsType;
    getType(id: number): ISailsType;
}
interface ISailsService {
    readonly funcs: ISailsServiceFunc[];
    readonly events: ISailsServiceEvent[];
    readonly name: string;
}
interface ISailsServiceFunc extends ISailsDocs {
    readonly name: string;
    readonly isQuery: boolean;
    readonly params: ISailsFuncParam[];
    readonly def: ISailsTypeDef;
}
interface ISailsCtor {
    readonly funcs: ISailsCtorFunc[];
}
interface ISailsCtorFunc extends ISailsDocs {
    readonly name: string;
    readonly params: ISailsFuncParam[];
}
interface ISailsFuncParam {
    readonly name: string;
    readonly def: ISailsTypeDef;
}
type ISailsServiceEvent = ISailsEnumVariant;

interface ISailsIdlParser {
    init(): Promise<void>;
    parse(idl: string): ISailsProgram;
}

export type { ISailsCtor, ISailsCtorFunc, ISailsDocs, ISailsEnumDef, ISailsEnumVariant, ISailsFixedSizeArrayDef, ISailsFuncParam, ISailsIdlParser, ISailsMapDef, ISailsOptionalDef, ISailsPrimitiveDef, ISailsProgram, ISailsResultDef, ISailsService, ISailsServiceEvent, ISailsServiceFunc, ISailsStructDef, ISailsStructField, ISailsType, ISailsTypeDef, ISailsUserDefinedDef, ISailsVecDef, IWithDefEntity };
